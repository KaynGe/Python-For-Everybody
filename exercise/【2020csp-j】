1.优秀的拆分
一般来说，一个正整数可以拆分成若干个正整数的和。例如，1=1，10=1+2+3+4等。
对于正整数n的一种特定拆分，我们称它为“优秀的”，当且仅当在这种拆分下，n被分解为了
若干个不同的2的正整数次幂。例如，10 = 8 + 2 = 2^3 + 2^1是一个优秀的拆分。
但是，7 = 4 + 2 + 1 = 2^2 + 2^1 + 2^0就不是一个优秀的拆分，因为 1不是 2的正整数次幂。
现在，给定正整数n，你需要判断这个数的所有拆分中，是否存在优秀的拆分。若存在，请你给出具体的拆分方案。

输入描述:
输入只有一行，一个正整数 n，代表需要判断的数。

输出描述:
如果这个数的所有拆分中，存在优秀的拆分。那么，你需要从大到小输出这个拆分中的每一个数，相邻两个数之间
用一个空格隔开。若不存在优秀的拆分，输出-1。

示例1:
输入：6
输出：4 2
说明：
6 = 4 + 2 = 2^2 + 2^1是一个优秀的拆分。注意，6 = 2 + 2 + 2 不是一个优秀的拆分，因为拆分成的 3 个数不满足每个数互不相同。

示例2
输入：7
输出：-1

answer：

1.优秀的拆分
n = eval(input())

def getArr(n):
    ls = []
    a = 2
    while a <= n:
        ls.append(a)
        a *= 2
    ls.reverse()
    return ls

arr = getArr(n)
res = []
for x in arr:
    if n - x < 0: continue
    else:
        res.append(x)
        n -= x
if n != 0:
    print(-1)
else:
    for x in res:
        print(x, end = ' ')
        
