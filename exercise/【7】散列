1. 两数之和 （leetcode 01）
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，
并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

2. 同构字符串 (leetcode 205)
给定两个字符串 s 和 t，判断它们是否是同构的。
如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。
所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。
两个字符不能映射到同一个字符上，但字符可以映射自己本身。

示例 1:
输入: s = "egg", t = "add"
输出: true

示例 2:
输入: s = "foo", t = "bar"
输出: false

示例 3:
输入: s = "paper", t = "title"
输出: true

示例 4:
输入: s = "ab", t = "aa"
输出: true

answer：
1. 两数之和 （leetcode 01）
def twoSum(nums: list[int], target: int) -> list[int]:
    hashMap = {}
    for index,value in enumerate(nums):
        hashMap[value] = index
    for index,value in enumerate(nums):
        j = hashMap.get(target - value, 0)
        if j != 0 and j != index:
            return [index, j]
    return []

nums = eval(input())
target = eval(input())
ans = twoSum(nums, target)
print(ans)

2. 同构字符串 (leetcode 205)
def isIsomorphic(s: str, t: str) -> bool:
    # s2t, t2s = {}, {}
    # for i in range(len(s)):
    #     a, b = s[i], t[i]
    #     if (a in s2t and s2t[a] != b) or (b in t2s and t2s[b] != a):
    #         return False
    #     s2t[a] = b
    #     t2s[b] = a
    # return True

    for i in range(len(s)):
    if s.index(s[i]) != t.index(t[i]):
        return False
    return True
